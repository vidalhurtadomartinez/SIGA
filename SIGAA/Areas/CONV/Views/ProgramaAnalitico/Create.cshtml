@model SIGAA.Areas.CONV.ViewModels.ProgramaAnaliticoViewModels

@{
    ViewBag.Title = "Nuevo";
}

<h2>Nuevo</h2>

@using (Html.BeginForm("Create", "ProgramaAnalitico", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Programa Analitico</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sMateria_desc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @(Html.Kendo().AutoCompleteFor(model => model.gatbl_ProgramasAnaliticos.sMateria_desc)
                  .DataTextField("sMateria_desc")
                  .Placeholder("Buscar Materia")
                  .Filter("contains")
                  .MinLength(3)
                  .HtmlAttributes(new { style = "width:280px" })
                  .DataSource(source =>
                  {
                      source.Read(read =>
                      {
                          read.Action("ObtenerMaterias", "ProgramaAnalitico")
                              .Data("onAdditionalData");
                      })
                      .ServerFiltering(true);
                  })
                  .Events(e =>
                    {
                        e.Select("onSelectMateria").Filtering("onFilteringMateria");
                    })
                )
                @*@Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sMateria_desc, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sMateria_desc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.lUNegocio_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("lUNegocio_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.lUNegocio_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.lUniversidad_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.gatbl_ProgramasAnaliticos.lUniversidad_id,
              new SelectList(ViewBag.UniversidadList, "lUniversidad_id", "sNombre_desc"),
              "Seleccionar Universidad",
              new { @class = "form-control" })
                @*@Html.DropDownList("lUniversidad_id", null, htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.lUniversidad_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">           
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.lFacultad_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.gatbl_ProgramasAnaliticos.lFacultad_id, new SelectList(Enumerable.Empty<SelectListItem>(), "lFacultad_id", "sFacultad_nm"), "Seleccionar Facultad", new { id = "lFacultad_id", @class = "form-control" })
                @*@Html.DropDownList("lFacultad_id", null, htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.lFacultad_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.lCarrera_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.gatbl_ProgramasAnaliticos.lCarrera_id, new SelectList(Enumerable.Empty<SelectListItem>(), "lCarrera_id", "sCarrera_nm"), "Seleccionar Carrera", new { id = "lCarrera_id", @class = "form-control" })
                @*@Html.DropDownList("lCarrera_id", null, htmlAttributes: new { @class = "form-control" })*@
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.lCarrera_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.lPensum_id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.gatbl_ProgramasAnaliticos.lPensum_id, new SelectList(Enumerable.Empty<SelectListItem>(), "lPensum_id", "sDescripcion"), "Seleccionar Pensum", new { id = "lPensum_id", @class = "form-control" })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.lPensum_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sCodigo_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.gatbl_ProgramasAnaliticos.sCodigo_nro, new { @class = "form-control", placeholder = "Codigo" })
                @*@Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sCodigo_nro, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sCodigo_nro, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sSigla_desc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sSigla_desc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sSigla_desc, "", new { @class = "text-danger" })
            </div>
        </div>

        
        @*<div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sCodigo_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                    
                <div class="form-inline">
                        
                            @Html.TextBoxFor(model => model.gatbl_ProgramasAnaliticos.sCodigo_nro, new { @class = "form-control", placeholder = "Codigo" })                            
                            @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sCodigo_nro, "", new { @class = "text-danger" })
                            
                    <div class="form-group row">
                        @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sSigla_desc, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-xs-2">
                            @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sSigla_desc, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sSigla_desc, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        </div>*@
                
           
       

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sHorasPracticas_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                    
                    @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sHorasPracticas_nro, new { htmlAttributes = new { @class = "form-control", @onchange = "OnChangeEvent();" } })
                    @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sHorasPracticas_nro, "", new { @class = "text-danger" })

            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sHorasTeoricas_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sHorasTeoricas_nro, new { htmlAttributes = new { @class = "form-control", @onchange = "OnChangeEvent();" } })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sHorasTeoricas_nro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sHorasSociales_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sHorasSociales_nro, new { htmlAttributes = new { @class = "form-control", @onchange = "OnChangeEvent();" } })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sHorasSociales_nro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sHorasAyudantia_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-2">
                @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sHorasAyudantia_nro, new { htmlAttributes = new { @class = "form-control", @onchange = "OnChangeEvent();" } })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sHorasAyudantia_nro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sCarga_Horaria, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                    
                @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sCarga_Horaria, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sCarga_Horaria, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.lTipoCargaHoraria_fl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-xs-10">
                @Html.DropDownList("lTipoCargaHoraria_fl", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.lTipoCargaHoraria_fl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sCreditos_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sCreditos_nro, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sCreditos_nro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.gatbl_ProgramasAnaliticos.sVersion_nro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.gatbl_ProgramasAnaliticos.sVersion_nro, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.gatbl_ProgramasAnaliticos.sVersion_nro, "", new { @class = "text-danger" })
            </div>
        </div>
            

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar Programa" class="btn btn-success" />
                @Html.ActionLink("Cancelar", "Index", new { }, new { @class = "btn btn-warning" })
            </div>
        </div>
            
        </div>
}

<h2>Unidades Y Temas del Programa Analitico</h2>

@(Html.Kendo().TreeList<SIGAA.Areas.CONV.Models.gatbl_DetProgramasAnaliticos>()
    .Name("treelist")
    .Toolbar(toolbar => toolbar.Create().Text("Crear Unidad"))
    .Columns(columns =>
    {
        columns.Add().Field(e => e.sNumero).Title("Numero").Width(100).Sortable();
        columns.Add().Field(e => e.sDescripcion_desc).Title("Descripcion");
        columns.Add().Field(e => e.sContenido_gral).Title("Contenido General").Width(200);


        columns.Add().Title("Edicion").Width(300).Command(c =>
        {
            c.CreateChild().Text("Nuevo");
            c.Edit().Text("Editar");
            c.Destroy().Text("Eliminar");
        })
        .HtmlAttributes(new
        {
            style = "text-align: center;"
        });
    })
    .Editable()
    .Filterable(true)
    .Sortable()
    .HtmlAttributes(new { style = "height:500px" })
    .DataSource(dataSource => dataSource
        .ServerOperation(false)
        .Create(create => create.Action("CreateNew", "gatbl_DetProgramasAnaliticos"))
        .Read(read => read.Action("All", "gatbl_DetProgramasAnaliticos"))
        .Update(update => update.Action("Update", "gatbl_DetProgramasAnaliticos"))
        .Destroy(delete => delete.Action("Destroy", "gatbl_DetProgramasAnaliticos"))
        .Sort(p => p.Add("sNumero").Ascending())
        .Model(m =>
        {
            m.Id(f => f.lDetProgramaAnalitico_id);
            m.ParentId(f => f.lDetProgramaAnaliticoPadre_id);
            m.Expanded(true);
            m.Field(f => f.sNumero).DefaultValue(0).Editable(false);
            m.Field(f => f.sDescripcion_desc);
            m.Field(f => f.sContenido_gral);            
        })
    )
    //.Height(450)
)


@*<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.gatbl_DProgramasAnalitico.sUnidad_nro)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.gatbl_DProgramasAnalitico.sUnidad_desc)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.gatbl_DProgramasAnaliticosTema.sTema_desc)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.gatbl_DProgramasAnalitico.sContenido_gral)
        </th>
        <th></th>
    </tr>

    @foreach (var unidad in Model.gatbl_DProgramasAnaliticos)
    {
        <tr class="active">
            <td>
                @Html.DisplayFor(modelItem => unidad.sUnidad_nro)
            </td>
            <td>
                @Html.DisplayFor(modelItem => unidad.sUnidad_desc)
            </td>
            <td>
                
            </td>
            <td>
                @Html.DisplayFor(modelItem => unidad.sContenido_gral)
            </td>
            <td>
                @Html.ActionLink("Editar", "EditarUnidad", new { id = unidad.lDProgramaAnalitico_id }) |
                @Html.ActionLink("Eliminar", "Delete", new { id = unidad.lDProgramaAnalitico_id })
            </td>
        </tr>

        foreach (var tema in Model.gatbl_DProgramasAnaliticosTemas.Where(t=> t.lDProgramaAnalitico_id == unidad.lDProgramaAnalitico_id))
        {
            <tr>
                <td class="default">
                    
                </td>
                <td class="default">

                </td>
                <td>
                    @Html.DisplayFor(modelItem => tema.sTema_desc)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => tema.sContenido_gral)
                </td>
                <td>
                    @Html.ActionLink("Editar", "EditarTema", new { id = tema.lDProgramaAnaliticoTema_id }) |
                    @Html.ActionLink("Eliminar", "Delete", new { id = tema.lDProgramaAnaliticoTema_id })
                </td>
            </tr>
        }
    }


</table>*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        kendo.culture("es-ES");

        $(document).ready(function () {
            kendo.culture("es-ES");
            $.validator.addMethod('date',
               function (value, element) {
                   var isValidDate = this.optional(element) || kendo.parseDate(value);
                   return isValidDate
               });
        });

        $(document).ready(function () {
            //$("#lFacultad_id").prop("disabled", true);
            $("#gatbl_ProgramasAnaliticos_lUniversidad_id").change(function () {
                var univId = $("#gatbl_ProgramasAnaliticos_lUniversidad_id").val();
                if (univId != null && univId != undefined && univId != '') {
                    var CountryOptions = {};
                    CountryOptions.url = '@Url.Action("FacultadList", "ProgramaAnalitico")';
                    CountryOptions.type = "POST";
                    CountryOptions.data = JSON.stringify({ id: univId });
                    CountryOptions.datatype = "json";
                    CountryOptions.contentType = "application/json";
                    CountryOptions.success = function (facultades) {
                        $("#lFacultad_id").empty();
                        $("#lCarrera_id").empty();
                        $("#lPensum_id").empty();
                        $('#lFacultad_id')
                           .append($("<option></option>")
                           .attr("value", 0)
                           .text("Seleccionar Facultad"));
                        $.each(facultades, function (index, val) {
                            $('#lFacultad_id')
                            .append($("<option></option>")
                            .attr("value", val.Value)
                            .text(val.Text));
                        });
                    };
                    CountryOptions.error = function () { alert("Error al obtener Facultades!!"); };
                    $.ajax(CountryOptions);
                }
                else {
                    $("#lFacultad_id").empty();
                    $("#lCarrera_id").empty();
                    //$("#lFacultad_id").prop("disabled", true);
                }
            });
        });

        $(document).ready(function () {
            //$("#lFacultad_id").prop("disabled", true);
            $("#lFacultad_id").change(function () {
                var facId = $("#lFacultad_id").val();
                if (facId != null && facId != undefined && facId != '') {
                    var CountryOptions = {};
                    CountryOptions.url = '@Url.Action("CarreraList", "ProgramaAnalitico")';
                    CountryOptions.type = "POST";
                    CountryOptions.data = JSON.stringify({ id: facId });
                    CountryOptions.datatype = "json";
                    CountryOptions.contentType = "application/json";
                    CountryOptions.success = function (carreras) {
                        $("#lCarrera_id").empty();
                        $("#lPensum_id").empty();
                        $('#lCarrera_id')
                           .append($("<option></option>")
                           .attr("value", 0)
                           .text("Seleccionar Carrera"));
                        $.each(carreras, function (index, val) {
                            $('#lCarrera_id')
                            .append($("<option></option>")
                            .attr("value", val.Value)
                            .text(val.Text));
                        });
                    };
                    CountryOptions.error = function () { alert("Error al obtener Carreras!!"); };
                    $.ajax(CountryOptions);
                }
                else {
                    $("#lCarrera_id").empty();
                    //$("#lFacultad_id").prop("disabled", true);
                }
            });
        });

        $(document).ready(function () {
            //$("#lFacultad_id").prop("disabled", true);
            $("#lCarrera_id").change(function () {
                var facId = $("#lCarrera_id").val();
                if (facId != null && facId != undefined && facId != '') {
                    var CountryOptions = {};
                    CountryOptions.url = '@Url.Action("PensumList", "ProgramaAnalitico")';
                    CountryOptions.type = "POST";
                    CountryOptions.data = JSON.stringify({ id: facId });
                    CountryOptions.datatype = "json";
                    CountryOptions.contentType = "application/json";
                    CountryOptions.success = function (pensum) {
                        $("#lPensum_id").empty();
                        $.each(pensum, function (index, val) {
                            $('#lPensum_id')
                            .append($("<option></option>")
                            .attr("value", val.Value)
                            .text(val.Text));
                        });
                    };
                    CountryOptions.error = function () { alert("Error al obtener Pensum!!"); };
                    $.ajax(CountryOptions);
                }
                else {
                    $("#lPensum_id").empty();
                    //$("#lFacultad_id").prop("disabled", true);
                }
            });
        });


        function onAdditionalData() {
            return {
                text: $("#gatbl_ProgramasAnaliticos_sMateria_desc").val()
            };
        }

        function onSelectMateria(e) {
            var dataItem = this.dataItem(e.item);
            $("#gatbl_ProgramasAnaliticos_sCodigo_nro").val(dataItem.sCodigo_nro);
            $("#gatbl_ProgramasAnaliticos_sSigla_desc").val(dataItem.sSigla_desc);
            $("#gatbl_ProgramasAnaliticos_sHorasPracticas_nro").val(dataItem.sHorasPracticas_nro);
            $("#gatbl_ProgramasAnaliticos_sHorasTeoricas_nro").val(dataItem.sHorasTeoricas_nro);
            $("#gatbl_ProgramasAnaliticos_sHorasSociales_nro").val(dataItem.sHorasSociales_nro);
            $("#gatbl_ProgramasAnaliticos_sHorasAyudantia_nro").val(dataItem.sHorasAyudantia_nro);
            $("#gatbl_ProgramasAnaliticos_sCreditos_nro").val(dataItem.sCreditos_nro);
            $("#gatbl_ProgramasAnaliticos_sCarga_Horaria").val(dataItem.sCarga_Horaria);
            $("#gatbl_ProgramasAnaliticos_sVersion_nro").val(dataItem.sVersion_nro);

        }

        function onFilteringMateria() {
            $("#gatbl_ProgramasAnaliticos_sCodigo_nro").val(0);
            $("#gatbl_ProgramasAnaliticos_sSigla_desc").val("");
            $("#gatbl_ProgramasAnaliticos_sHorasPracticas_nro").val(0);
            $("#gatbl_ProgramasAnaliticos_sHorasTeoricas_nro").val(0);
            $("#gatbl_ProgramasAnaliticos_sHorasSociales_nro").val(0);
            $("#gatbl_ProgramasAnaliticos_sHorasAyudantia_nro").val(0);
            $("#gatbl_ProgramasAnaliticos_sCreditos_nro").val(0);
            $("#gatbl_ProgramasAnaliticos_sCarga_Horaria").val(0);
            $("#gatbl_ProgramasAnaliticos_sVersion_nro").val(0);

        }

        function change() {
            //kendoConsole.log("Change :: " + this.value());
            //$("#gatbl_ProgramasAnaliticos_sCarga_Horaria").val(dataItem.agd_codigo);
        }

        function spin() {
            //kendoConsole.log("Spin :: " + this.value());
        }

        function OnChangeEvent()
        {            
            var hrp = $("#gatbl_ProgramasAnaliticos_sHorasPracticas_nro").val();
            var hrt = $("#gatbl_ProgramasAnaliticos_sHorasTeoricas_nro").val();
            var hrs = $("#gatbl_ProgramasAnaliticos_sHorasSociales_nro").val();
            var hra = $("#gatbl_ProgramasAnaliticos_sHorasAyudantia_nro").val();
            
            $("#gatbl_ProgramasAnaliticos_sCarga_Horaria").val(eval(hrp) + eval(hrt) + eval(hrs) + eval(hra));
        }

      function onSelectPostulante(e) {
          var dataItem = this.dataItem(e.item);
          $("#sAgenda_nro").val(dataItem.agd_codigo);
          $("#gatbl_PConvalidaciones_sDocumento_nro").val(dataItem.agd_docnro);
      }

      function onSelectCarrera(e) {
          var dataItem = this.dataItem(e.item);
          $("#gatbl_PConvalidaciones_secciones_academicas_sca_descripcion").val(dataItem.sca_descripcion);
      }
    </script>
}
