@using SIGAA.Areas.CRM
@{
    Layout = null;
    //ViewBag.Title = "Reportes";
}
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Reporte-Follow Up</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>

    <link href="http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.blueopal.min.css" rel="stylesheet" />

    <!--kendo.web.min.js or kendo.all.min.js can be used as well instead of the following custom Kendo UI-->
    <script src="@Url.Content("~/ReportViewer/js/kendo.subset.2015.3.930.min.js")"></script>

    <style type="text/css">
        html, body, #header, div#content {
            border: 0px;
            padding: 0px;
            margin: 0px;
            width: 100%;
            height: 100%;
        }

        #reportViewer1 {
            position: absolute;
            left: 0px;
            right: 0px;
            top: 0px;
            bottom: 0px;
            font-family: 'segoe ui', 'ms sans serif';
            font-size: 12px;
            overflow: hidden;
        }
    </style>

    <script type="text/javascript">
            kendo.culture("es-ES");

            //$(document).ready(function () {
            //    resizeContent();

            //    $(window).resize(function () {
            //        resizeContent();
            //    });
            //});

            //function resizeContent() {
            //    $height = $(window).height();
            //    $('div#content').height($height);

            //    var grid = $("#reportViewer1").data('telerik_ReportViewer');
            //    if (grid != undefined) {
            //        grid.resize();
            //    }
            //}
    </script>

    <script src="@Url.Content("~/ReportViewer/js/telerikReportViewer-10.0.16.113.min.js")"></script>

</head>
<body>
    <div id="content">
        @(Html.TelerikReporting().ReportViewer()
        // Each report viewer must have an id - it will be used by the initialization script
        // to find the element and initialize the report viewer.
        .Id("reportViewer1")
        // The URL of the service which will serve reports.
        // The URL corresponds to the name of the controller class (ReportsController).
        // For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.
        .ServiceUrl(Url.Content("~/api/reports/"))
        // The URL for custom report viewer template. The template can be edited -
        // new functionalities can be added and unneeded ones can be removed.
        // For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.
        // .TemplateUrl(Url.Content("/ReportViewer/templates/telerikReportViewerTemplate-10.0.16.113.html"))
        // Strongly typed ReportSource - TypeReportSource or UriReportSource.
        .ReportSource(new TypeReportSource() { TypeName = "ReportFollowUp.rptFormularioDetalleRespuesta, ReportFollowUp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" })
        // Specifies whether the viewer is in interactive or print preview mode.
        // PrintPreview - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
        // Interactive - Displays the report in its original width and height with no paging. Additionally interactivity is enabled.
        .ViewMode(ViewMode.PrintPreview)
        // Sets the scale mode of the viewer.
        // Three modes exist currently:
        // FitPage - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
        // FitPageWidth - The report will be zoomed in or out so that the width of the screen and the width of the report match.
        // Specific - Uses the scale to zoom in and out the report.
        .ScaleMode(ScaleMode.FitPageWidth)
        // Zoom in and out the report using the scale
        // 1.0 is equal to 100%, i.e. the original size of the report
        .Scale(1.0)
        // Sets whether the viewer’s client session to be persisted between the page’s refreshes(ex. postback).
        // The session is stored in the browser’s sessionStorage and is available for the duration of the page session.
        .PersistSession(false)
        // Sets the print mode of the viewer.
        .PrintMode(PrintMode.AutoSelect)
        )
    </div>
</body>
</html>